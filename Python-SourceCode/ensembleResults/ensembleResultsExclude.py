# -*- coding: utf-8 -*-
"""
Created on Wed Dec  8 10:50:38 2021

@author: mittmann
"""

import numpy as np
from ModelEvaluation import ModelEvaluation

import scikitplot as skplt
from sklearn import metrics
import matplotlib.pyplot as plt

THROMBUS_NO = 0.214
THROMBUS_YES = 0.786
DATASET_LENGTH = 102

gt = np.array([0.786, 0.786, 0.786, 0.786, 0.786, 0.786, 0.786, 0.786, 0.786, 0.786, 0.786, 0.786,
                 0.786, 0.786, 0.786, 0.786, 0.786, 0.786, 0.214, 0.214, 0.786, 0.786, 0.214, 0.786,
                 0.214, 0.786, 0.214, 0.786, 0.786, 0.786, 0.786, 0.786, 0.214, 0.786, 0.786, 0.786,
                 0.786, 0.214, 0.786, 0.214, 0.786, 0.214, 0.786, 0.786, 0.214, 0.786, 0.214, 0.214,
                 0.214, 0.786, 0.214, 0.786, 0.214, 0.214, 0.214, 0.786, 0.214, 0.214, 0.214, 0.786,
                 0.786, 0.786, 0.786, 0.786, 0.786, 0.786, 0.786, 0.786, 0.786, 0.214, 0.786, 0.786,
                 0.786, 0.786, 0.786, 0.214, 0.786, 0.786, 0.214, 0.786, 0.786, 0.786, 0.786, 0.214,
                 0.786, 0.786, 0.214, 0.786, 0.214, 0.786, 0.214, 0.786, 0.786, 0.786, 0.786, 0.786,
                 0.214, 0.214, 0.786, 0.786, 0.786, 0.214])

#=========================================================================================================================
mean_frontal_resnet18_gru = np.array([0.81365309, 0.70331525, 0.81961498, 0.83254858, 0.61288149, 0.73320117,
                                     0.58286226, 0.76439679, 0.81878327, 0.82541287, 0.87078093, 0.83799453,
                                     0.83127168, 0.86157495, 0.77805525, 0.35819473, 0.61861877, 0.86075833,
                                     0.39473571, 0.37899693, 0.77879651, 0.58600545, 0.39621295, 0.78219981,
                                     0.34079982, 0.78923602, 0.28266637, 0.81040795, 0.30233482, 0.77289641,
                                     0.43138359, 0.78427775, 0.57819595, 0.84625856, 0.30215599, 0.25716331,
                                     0.82496486, 0.29661196, 0.73956616, 0.27251123, 0.79528801, 0.32666644,
                                     0.73586025, 0.57385913, 0.16355506, 0.76760105, 0.62402494, 0.41781244,
                                     0.66943506, 0.84121891, 0.64639728, 0.80954111, 0.54454539, 0.48948652,
                                     0.49256312, 0.78506271, 0.52666363, 0.62146080, 0.70707529, 0.76522505,
                                     0.60353386, 0.71808875, 0.65962247, 0.78025301, 0.81180656, 0.70760608,
                                     0.52667409, 0.71441188, 0.76100017, 0.59908702, 0.79466784, 0.85029697,
                                     0.78985578, 0.78741224, 0.78354222, 0.28551497, 0.74605047, 0.76187819,
                                     0.41824332, 0.87653902, 0.86715825, 0.55887783, 0.82735351, 0.52500695,
                                     0.60583304, 0.76952854, 0.16085492, 0.85418104, 0.48126202, 0.82220154,
                                     0.44267141, 0.65751101, 0.69096078, 0.77827436, 0.58332978, 0.68141413,
                                     0.59471546, 0.43640977, 0.79658839, 0.53557301, 0.47986468, 0.40167184])

mean_lateral_resnet18_gru = np.array([0.76448804, 0.78343260, 0.79011232, 0.75872576, 0.43792767, 0.79250872,
                                     0.73575356, 0.78162191, 0.76474370, 0.76539068, 0.78434931, 0.75784836,
                                     0.77694138, 0.78072062, 0.78214248, 0.75313318, 0.74307115, 0.76997998,
                                     0.73228804, 0.43909293, 0.76836883, 0.40881765, 0.45691846, 0.76807586,
                                     0.40902687, 0.78473754, 0.25543565, 0.77268871, 0.25349841, 0.78040568,
                                     0.69661476, 0.77939953, 0.47411448, 0.76867956, 0.47862838, 0.40534419,
                                     0.77371069, 0.27399567, 0.78949902, 0.25679269, 0.78033345, 0.24773934,
                                     0.76449294, 0.75919026, 0.51545979, 0.78022790, 0.57878405, 0.24852481,
                                     0.29039517, 0.76762123, 0.69902153, 0.76547450, 0.66841161, 0.25637756,
                                     0.22516501, 0.79128621, 0.39517362, 0.73874805, 0.46730087, 0.65878642,
                                     0.76241883, 0.76185685, 0.44152429, 0.78652748, 0.75810584, 0.74358366,
                                     0.73261961, 0.78016322, 0.77184016, 0.77606438, 0.78364769, 0.75249985,
                                     0.74230276, 0.72517282, 0.77771131, 0.22209280, 0.77699498, 0.53479926,
                                     0.25618410, 0.77548442, 0.80385940, 0.45432850, 0.78770794, 0.52150064,
                                     0.34304368, 0.75541667, 0.26249572, 0.77988074, 0.37457978, 0.78820683,
                                     0.56002860, 0.73784149, 0.76473523, 0.76128616, 0.76063786, 0.77700636,
                                     0.77619950, 0.77245429, 0.78140000, 0.75570177, 0.76191400, 0.38102178])

#=========================================================================================================================
mean_frontal_efficientnet_b0_gru = np.array([0.76708770, 0.44032087, 0.78278806, 0.70391653, 0.48841976, 0.72858677,
                                             0.54463253, 0.73882383, 0.43084451, 0.73862200, 0.82641897, 0.71034534,
                                             0.68721865, 0.86284497, 0.73433419, 0.25009736, 0.39254475, 0.77680103,
                                             0.45766372, 0.22233859, 0.73948247, 0.37663211, 0.55332474, 0.61707209,
                                             0.16644810, 0.72445354, 0.13113075, 0.79344498, 0.36759055, 0.76313320,
                                             0.40087331, 0.68780230, 0.42675424, 0.78231049, 0.19988055, 0.24853637,
                                             0.74042645, 0.13904855, 0.80830392, 0.34105919, 0.73847969, 0.49767462,
                                             0.81123887, 0.79817553, 0.18347539, 0.78704027, 0.62985539, 0.13836702,
                                             0.26997845, 0.78285487, 0.38521464, 0.74297411, 0.54545310, 0.34177328,
                                             0.25261743, 0.63754485, 0.61518849, 0.65229681, 0.58038654, 0.61944549,
                                             0.60852965, 0.29913137, 0.52166921, 0.76861765, 0.82212521, 0.70929213,
                                             0.59895478, 0.68365107, 0.66824598, 0.53387329, 0.71301786, 0.79134024,
                                             0.74713629, 0.76380259, 0.76645478, 0.14847680, 0.65987990, 0.69475054,
                                             0.24281568, 0.80537382, 0.81677247, 0.56070644, 0.79615886, 0.58715038,
                                             0.45092548, 0.76920246, 0.16039748, 0.78195047, 0.30803120, 0.78057834,
                                             0.22340037, 0.61019983, 0.51325606, 0.77733811, 0.68137289, 0.66225756,
                                             0.61790708, 0.62172553, 0.69818932, 0.64957004, 0.44966767, 0.17853273])

mean_lateral_efficientnet_b0_gru = np.array([0.66724598, 0.65711006, 0.80290306, 0.80439399, 0.26796975, 0.80506107,
                                             0.74562875, 0.72367496, 0.64828792, 0.64291160, 0.79716142, 0.25332150,
                                             0.36813726, 0.70391474, 0.82835783, 0.66308230, 0.53507051, 0.71955298,
                                             0.77780159, 0.18809350, 0.77819245, 0.36123891, 0.34189086, 0.68105102,
                                             0.37162437, 0.80277923, 0.26741240, 0.79068258, 0.18007061, 0.73029107,
                                             0.48277021, 0.71690871, 0.28466001, 0.79797671, 0.36060457, 0.20606108,
                                             0.83179685, 0.28017435, 0.83200486, 0.15991230, 0.82622571, 0.18462852,
                                             0.77811328, 0.82774644, 0.57037606, 0.81647490, 0.27771604, 0.20387030,
                                             0.23917404, 0.74321207, 0.38079561, 0.75569274, 0.34192484, 0.15852148,
                                             0.12461538, 0.69133017, 0.29447322, 0.24441215, 0.27347777, 0.69027513,
                                             0.80238463, 0.84239714, 0.38301285, 0.75844206, 0.83677990, 0.78409866,
                                             0.77894713, 0.74637544, 0.66243694, 0.82488222, 0.67512833, 0.50519177,
                                             0.47082692, 0.50776898, 0.71923968, 0.15323365, 0.71080556, 0.69895241,
                                             0.29824493, 0.74163182, 0.85717119, 0.23752037, 0.76435940, 0.77437150,
                                             0.41160209, 0.80172516, 0.23668037, 0.80131032, 0.19147347, 0.79843166,
                                             0.30576988, 0.68092875, 0.56571372, 0.72776375, 0.73236750, 0.71152353,
                                             0.67682280, 0.53185450, 0.70426800, 0.50076754, 0.72387630, 0.18892584])

#=========================================================================================================================
mean_frontal_efficientnet_b0_lstm = np.array([0.73766145, 0.45835459, 0.78931688, 0.72118285, 0.30691386, 0.71756293,
                                             0.43107693, 0.75869654, 0.31933948, 0.73663683, 0.78861271, 0.74286309,
                                             0.72906696, 0.80079874, 0.72999676, 0.23934471, 0.38061747, 0.77037441,
                                             0.35050564, 0.20465744, 0.76119777, 0.41928395, 0.49192152, 0.67082447,
                                             0.21349714, 0.72326298, 0.19717876, 0.75860773, 0.28075106, 0.76925421,
                                             0.38129803, 0.72473497, 0.38683560, 0.78380778, 0.23099701, 0.27594170,
                                             0.77331899, 0.21387035, 0.70352670, 0.27748736, 0.73117312, 0.27794628,
                                             0.77329566, 0.74607948, 0.22772937, 0.77314485, 0.52355414, 0.21189710,
                                             0.31001606, 0.78869004, 0.37246919, 0.79101419, 0.49476043, 0.21774463,
                                             0.21157404, 0.78718334, 0.41054159, 0.64123009, 0.48542379, 0.55980676,
                                             0.55511649, 0.37633506, 0.57247739, 0.74840772, 0.79085259, 0.53454823,
                                             0.73840867, 0.76517117, 0.73501871, 0.44653612, 0.75123775, 0.78938876,
                                             0.74986742, 0.76385061, 0.77965405, 0.18067645, 0.65402825, 0.57379965,
                                             0.23615752, 0.76326844, 0.79728791, 0.53249214, 0.79749812, 0.47465000,
                                             0.50330548, 0.75052694, 0.18970647, 0.78163568, 0.32064897, 0.78557544,
                                             0.24317423, 0.39011663, 0.47920825, 0.74153069, 0.59437745, 0.77691315,
                                             0.62245356, 0.48726898, 0.75236415, 0.66826119, 0.39429020, 0.21392375])

mean_lateral_efficientnet_b0_lstm = np.array([0.77405093, 0.77009230, 0.79613357, 0.79426249, 0.30909150, 0.78328377,
                                             0.79473805, 0.79237479, 0.78951223, 0.78841331, 0.79251502, 0.31873951,
                                             0.52736962, 0.79200916, 0.79682297, 0.78849181, 0.77884675, 0.78435208,
                                             0.78469858, 0.19440415, 0.77974761, 0.38579769, 0.33121377, 0.75633569,
                                             0.40029424, 0.79704382, 0.26990021, 0.79572471, 0.24885775, 0.77335327,
                                             0.57842595, 0.75076808, 0.21595635, 0.79413768, 0.55608991, 0.19606676,
                                             0.79638174, 0.27671000, 0.79413949, 0.19595201, 0.79661031, 0.19440849,
                                             0.79392649, 0.79670291, 0.70929065, 0.79359347, 0.19456789, 0.19366778,
                                             0.19790701, 0.78947711, 0.41932230, 0.77606407, 0.43732349, 0.20444052,
                                             0.18868615, 0.71176625, 0.22361668, 0.34139921, 0.30146816, 0.76638722,
                                             0.79309636, 0.79521133, 0.44184817, 0.77919153, 0.79652128, 0.79695736,
                                             0.74752301, 0.79020681, 0.67687652, 0.79411505, 0.73528098, 0.76165299,
                                             0.76645924, 0.58992150, 0.79129069, 0.19038844, 0.79677016, 0.78269070,
                                             0.23971210, 0.79790248, 0.79335580, 0.19272931, 0.78930944, 0.79324611,
                                             0.48625348, 0.79624184, 0.20948560, 0.79119568, 0.19055892, 0.79371965,
                                             0.21367141, 0.78947092, 0.73397201, 0.79117197, 0.77863542, 0.75325776,
                                             0.67641751, 0.42149754, 0.78475463, 0.49375092, 0.79053668, 0.19262734])

#=========================================================================================================================
mean_frontal_efficientnet_b1_gru = np.array([0.75649084, 0.56432613, 0.77652770, 0.78820966, 0.39610412, 0.75140318,
                                             0.49854002, 0.77233411, 0.46316667, 0.76851822, 0.77268143, 0.76520802,
                                             0.78018336, 0.77337989, 0.77791423, 0.28686354, 0.40576454, 0.77333932,
                                             0.71096794, 0.54995847, 0.76737959, 0.47274379, 0.46105014, 0.77339691,
                                             0.25153711, 0.76200156, 0.24313014, 0.77088182, 0.26372196, 0.75593344,
                                             0.31832425, 0.79109744, 0.63642716, 0.79403841, 0.26006132, 0.30063515,
                                             0.80059139, 0.24564895, 0.78587397, 0.27134545, 0.78288449, 0.26363488,
                                             0.69696536, 0.71620215, 0.23635309, 0.76934301, 0.62264792, 0.20942315,
                                             0.68226036, 0.76646389, 0.35947741, 0.76881894, 0.49936033, 0.33829583,
                                             0.25866813, 0.78095410, 0.47260937, 0.77502244, 0.65260123, 0.40569893,
                                             0.47960379, 0.25157593, 0.30252675, 0.76394707, 0.76878804, 0.75144773,
                                             0.74796759, 0.75580217, 0.75227643, 0.62020638, 0.79230766, 0.79224255,
                                             0.77024952, 0.79359528, 0.77975664, 0.26037113, 0.68037206, 0.79998388,
                                             0.30750481, 0.78851780, 0.77778020, 0.34648444, 0.78541633, 0.77842820,
                                             0.53972532, 0.76788616, 0.22794281, 0.78966926, 0.49917650, 0.78100777,
                                             0.57827601, 0.46481634, 0.74713788, 0.61551603, 0.58422658, 0.77337997,
                                             0.77924589, 0.64175340, 0.67407951, 0.62189679, 0.57431845, 0.23470581])

mean_lateral_efficientnet_b1_gru = np.array([0.79529598, 0.72396168, 0.78843000, 0.77842026, 0.30065902, 0.78195345,
                                             0.78655607, 0.78473759, 0.79679158, 0.79370933, 0.78642163, 0.41926160,
                                             0.56575479, 0.78918297, 0.78076379, 0.80028403, 0.77432551, 0.79394453,
                                             0.77772733, 0.23870599, 0.78806368, 0.58875767, 0.42619479, 0.79924918,
                                             0.24773239, 0.78870668, 0.23552767, 0.79074923, 0.34973999, 0.70237589,
                                             0.36177406, 0.78640779, 0.34760112, 0.78851477, 0.55309806, 0.23282493,
                                             0.79097453, 0.23643071, 0.78803988, 0.24025087, 0.77631633, 0.23392809,
                                             0.76632525, 0.78698572, 0.40761821, 0.78131349, 0.23574625, 0.23610193,
                                             0.23555802, 0.78831209, 0.62119539, 0.78896525, 0.79260615, 0.23195683,
                                             0.23967274, 0.79339801, 0.24209100, 0.65552058, 0.46321267, 0.69191680,
                                             0.78620616, 0.78512964, 0.54102670, 0.78768592, 0.78225001, 0.78918718,
                                             0.78000797, 0.79139497, 0.78827163, 0.78023249, 0.79302971, 0.76339089,
                                             0.76066782, 0.57807533, 0.78601007, 0.24403951, 0.78241094, 0.78759890,
                                             0.28073257, 0.78300401, 0.78261315, 0.23697752, 0.78585294, 0.79076760,
                                             0.57421748, 0.78715491, 0.24350698, 0.78243079, 0.23897396, 0.78848815,
                                             0.37748297, 0.78909972, 0.76544076, 0.76969647, 0.77909360, 0.79161426,
                                             0.74529858, 0.55151311, 0.78778324, 0.74219614, 0.73518438, 0.23533057])

#=========================================================================================================================
mean_frontal_efficientnet_b1_lstm = np.array([0.76484009, 0.49794201, 0.79057896, 0.79058068, 0.48871571, 0.77651893,
                                             0.53486851, 0.78359481, 0.40308777, 0.75955971, 0.79025655, 0.77081480,
                                             0.78420751, 0.78285180, 0.78168763, 0.33447609, 0.50522567, 0.79139401,
                                             0.61781608, 0.38377653, 0.77646919, 0.32946698, 0.44526946, 0.74817001,
                                             0.24734907, 0.78131819, 0.22250171, 0.78241929, 0.21972824, 0.76691711,
                                             0.28902862, 0.77584023, 0.63387676, 0.79000615, 0.22647669, 0.29717128,
                                             0.75235369, 0.20972696, 0.78388882, 0.43248697, 0.77620792, 0.25120398,
                                             0.66119369, 0.62505424, 0.20973631, 0.75367669, 0.69463885, 0.22392715,
                                             0.47184936, 0.79225607, 0.45352352, 0.78673420, 0.57656195, 0.25324361,
                                             0.24200741, 0.53687038, 0.48793246, 0.77341526, 0.49774295, 0.37274290,
                                             0.33903645, 0.25901289, 0.30792477, 0.72876863, 0.77221199, 0.69116634,
                                             0.74699478, 0.58850490, 0.60768142, 0.64050363, 0.78501499, 0.78412549,
                                             0.77161834, 0.77800590, 0.78976614, 0.20988787, 0.58971006, 0.77291222,
                                             0.31753801, 0.78787397, 0.79338745, 0.43943546, 0.78678428, 0.75691113,
                                             0.61674889, 0.75140100, 0.21508238, 0.77368391, 0.43261685, 0.78785715,
                                             0.36424214, 0.22400104, 0.53938410, 0.48086715, 0.24204100, 0.74231349,
                                             0.49946821, 0.44443503, 0.67585838, 0.62117376, 0.62256793, 0.22165783])

mean_lateral_efficientnet_b1_lstm = np.array([0.78987797, 0.70172465, 0.79689591, 0.79588580, 0.26692049, 0.79760071,
                                             0.78341769, 0.79253206, 0.77745697, 0.78824294, 0.79361451, 0.76341808,
                                             0.78905553, 0.79919453, 0.79621814, 0.71505646, 0.73529890, 0.79032916,
                                             0.77570671, 0.19097022, 0.79382982, 0.77222420, 0.71809784, 0.75322471,
                                             0.42916633, 0.79512351, 0.22717282, 0.79341384, 0.20118586, 0.75874393,
                                             0.29663863, 0.77231860, 0.35540762, 0.79841796, 0.56995448, 0.20775045,
                                             0.79191382, 0.20005150, 0.78677996, 0.17783833, 0.79845567, 0.20081459,
                                             0.75065840, 0.79835137, 0.37874424, 0.79614357, 0.18845669, 0.18783456,
                                             0.19671732, 0.79164922, 0.69473910, 0.78162527, 0.76327140, 0.17882478,
                                             0.18554037, 0.77506232, 0.19147774, 0.76355872, 0.40952848, 0.77999096,
                                             0.79893053, 0.79862523, 0.51185668, 0.79004731, 0.79911797, 0.79035993,
                                             0.56356259, 0.79136628, 0.74826565, 0.79880331, 0.78316694, 0.76665996,
                                             0.76724501, 0.69709803, 0.79076941, 0.18193626, 0.76830945, 0.76495966,
                                             0.21506353, 0.79472314, 0.80093166, 0.20118174, 0.79389589, 0.78903620,
                                             0.58065100, 0.77597562, 0.24699839, 0.77625273, 0.20004321, 0.79355311,
                                             0.42932020, 0.67952778, 0.46248898, 0.69812996, 0.69110103, 0.79156733,
                                             0.71589769, 0.38365838, 0.79469378, 0.74121660, 0.77173772, 0.19913025])

#=========================================================================================================================

mean_frontal_efficientnet_b2_gru = np.array([0.77236651, 0.59472131, 0.79876887, 0.80284961, 0.74015485, 0.77362014,
                                             0.64042428, 0.78828350, 0.73821713, 0.79686308, 0.80670106, 0.79779812,
                                             0.77599534, 0.79849749, 0.79390559, 0.56684012, 0.69563152, 0.80200438,
                                             0.46391031, 0.55636600, 0.77981058, 0.58575697, 0.47286121, 0.63223885,
                                             0.26903246, 0.73620639, 0.18405178, 0.78239540, 0.47183143, 0.77563671,
                                             0.45756118, 0.75165503, 0.37373019, 0.80948697, 0.24307441, 0.48048033,
                                             0.77642068, 0.18312452, 0.60393828, 0.61545243, 0.78658822, 0.34315119,
                                             0.77378563, 0.65023035, 0.17935171, 0.69286935, 0.77178766, 0.25060713,
                                             0.71530243, 0.78586928, 0.69972862, 0.79482647, 0.52899083, 0.34704777,
                                             0.27988676, 0.70854391, 0.49158753, 0.75677477, 0.67350342, 0.72035841,
                                             0.51774386, 0.64295605, 0.63559636, 0.78313379, 0.76888002, 0.62987708,
                                             0.74390900, 0.77410754, 0.62786036, 0.39703186, 0.69753044, 0.80802304,
                                             0.78068081, 0.79260696, 0.77593516, 0.22305025, 0.70213044, 0.67433008,
                                             0.22728921, 0.80479108, 0.79825863, 0.45005345, 0.81095623, 0.43388326,
                                             0.74185145, 0.81292279, 0.43177150, 0.77935295, 0.29477382, 0.80267379,
                                             0.33606558, 0.64681367, 0.70987062, 0.79538584, 0.51711702, 0.71482501,
                                             0.47259198, 0.71291592, 0.77772148, 0.73918630, 0.42943080, 0.22565993])

mean_lateral_efficientnet_b2_gru = np.array([0.82048213, 0.77996432, 0.81830606, 0.82211682, 0.51060703, 0.79383038,
                                             0.73171740, 0.80022265, 0.76413348, 0.78791488, 0.82461768, 0.57825149,
                                             0.60182266, 0.76390409, 0.82028403, 0.78198231, 0.78427492, 0.77143933,
                                             0.51835165, 0.22112629, 0.81262211, 0.59279456, 0.56201545, 0.70959833,
                                             0.52146273, 0.81595612, 0.21359288, 0.81985686, 0.16983473, 0.69787018,
                                             0.55643562, 0.74742796, 0.36989308, 0.82190839, 0.54071172, 0.33300719,
                                             0.80266188, 0.19902454, 0.80687592, 0.12989678, 0.83735101, 0.14820772,
                                             0.74961194, 0.80637045, 0.40920297, 0.80422086, 0.32897458, 0.20792494,
                                             0.18776945, 0.76711073, 0.60464798, 0.81350102, 0.44509058, 0.15805378,
                                             0.15980126, 0.75328201, 0.23305238, 0.67277008, 0.71628596, 0.77674208,
                                             0.77263038, 0.82696131, 0.28344156, 0.80969708, 0.82557567, 0.80098776,
                                             0.72965329, 0.81003319, 0.72987661, 0.74919580, 0.80368712, 0.76326169,
                                             0.76786416, 0.60271659, 0.80518234, 0.13709831, 0.79434829, 0.77467738,
                                             0.42097797, 0.81677028, 0.81274933, 0.19361253, 0.80633503, 0.69380367,
                                             0.63086911, 0.81322821, 0.35912378, 0.80771619, 0.21966223, 0.80499971,
                                             0.36747175, 0.75598096, 0.73597610, 0.75831226, 0.78981324, 0.79030319,
                                             0.59119127, 0.54898537, 0.77609820, 0.66336864, 0.75132028, 0.20536689])


#=========================================================================================================================
mean_frontal_efficientnet_b3_gru = np.array([0.79237051, 0.36644619, 0.81960952, 0.78232299, 0.40946625, 0.81516415,
                                             0.60659649, 0.83245229, 0.46163366, 0.80148054, 0.81279229, 0.80357625,
                                             0.78954808, 0.80488316, 0.82424856, 0.44810479, 0.49699512, 0.83762904,
                                             0.45464529, 0.45035571, 0.76419857, 0.49184602, 0.40144258, 0.73136711,
                                             0.18330198, 0.79768685, 0.20638248, 0.84050006, 0.33503053, 0.76872184,
                                             0.26068214, 0.77872972, 0.53552364, 0.80404564, 0.19593963, 0.27872888,
                                             0.75896235, 0.21127950, 0.82526336, 0.52417030, 0.83649839, 0.18434777,
                                             0.74691113, 0.61381311, 0.13791755, 0.77838601, 0.48563706, 0.34194337,
                                             0.70960558, 0.82693293, 0.60124900, 0.82587129, 0.52212616, 0.29222661,
                                             0.21991164, 0.77704915, 0.51596499, 0.67399125, 0.68126756, 0.69409865,
                                             0.62289037, 0.26613293, 0.37912089, 0.80393016, 0.80210892, 0.53633974,
                                             0.76315032, 0.78723214, 0.66161383, 0.32837982, 0.83143045, 0.84094262,
                                             0.80482445, 0.79632289, 0.82298213, 0.19668745, 0.60589852, 0.75063020,
                                             0.28109106, 0.84684784, 0.83160303, 0.29402254, 0.79325821, 0.69058098,
                                             0.47457807, 0.80810808, 0.16091349, 0.79012361, 0.24570336, 0.83455493,
                                             0.23312298, 0.43557039, 0.77872033, 0.73592812, 0.62275013, 0.77750971,
                                             0.77973267, 0.57230954, 0.74030825, 0.48099575, 0.48735530, 0.16692898])

mean_lateral_efficientnet_b3_gru = np.array([0.82392091, 0.80452896, 0.80761584, 0.82201079, 0.30194148, 0.79649612,
                                             0.81754827, 0.80761520, 0.81014824, 0.76286451, 0.80570768, 0.77014315,
                                             0.79480544, 0.81533800, 0.81570411, 0.76367366, 0.76119345, 0.79625374,
                                             0.73413944, 0.27970566, 0.80739812, 0.69559861, 0.40418595, 0.75174373,
                                             0.51858784, 0.81566449, 0.44171788, 0.83206630, 0.49627340, 0.77755719,
                                             0.32912770, 0.76775312, 0.27496325, 0.82030174, 0.59876931, 0.37081215,
                                             0.77497171, 0.28063911, 0.81619998, 0.25338288, 0.80703231, 0.17997679,
                                             0.80180193, 0.77999793, 0.72980534, 0.78595567, 0.28549185, 0.23219961,
                                             0.21624753, 0.79673810, 0.58965126, 0.79264053, 0.56025594, 0.27920703,
                                             0.17483984, 0.74577793, 0.30183771, 0.76451185, 0.69111075, 0.77686621,
                                             0.80793269, 0.82033677, 0.62562456, 0.79719000, 0.82302096, 0.81293477,
                                             0.78506474, 0.80217202, 0.76420709, 0.81390176, 0.79945138, 0.76672485,
                                             0.79663923, 0.72286999, 0.81173357, 0.18065897, 0.78649371, 0.74485197,
                                             0.44466348, 0.81637858, 0.82575459, 0.46120791, 0.78315107, 0.56469171,
                                             0.75253747, 0.80943301, 0.35802511, 0.80835969, 0.18326540, 0.80556270,
                                             0.44148227, 0.74849887, 0.77714435, 0.77837595, 0.73256085, 0.78783705,
                                             0.79446077, 0.80197388, 0.80340934, 0.60755068, 0.76872070, 0.46655900])

#=========================================================================================================================
mean_frontal_tf_efficientnetv2_s_gru = np.array([0.75627247, 0.62693495, 0.74141486, 0.79376820, 0.69133486, 0.76766469,
                                                 0.55143968, 0.78169492, 0.69100713, 0.78743290, 0.73635230, 0.76032306,
                                                 0.75313853, 0.73865364, 0.76779553, 0.33685289, 0.40901567, 0.78262061,
                                                 0.66440967, 0.39205223, 0.81352907, 0.69304039, 0.37723413, 0.63568656,
                                                 0.27080028, 0.79746587, 0.24610207, 0.77763482, 0.28830408, 0.75054007,
                                                 0.31754526, 0.69909767, 0.39680780, 0.76240540, 0.43371916, 0.38559925,
                                                 0.77663914, 0.22279475, 0.75005229, 0.34790952, 0.77177280, 0.24850033,
                                                 0.74091400, 0.71360196, 0.23055814, 0.74903356, 0.37924345, 0.22774354,
                                                 0.39680418, 0.80141139, 0.55000598, 0.75046844, 0.33815185, 0.29856109,
                                                 0.18564019, 0.76153376, 0.44698595, 0.69485651, 0.64605557, 0.63115865,
                                                 0.56607501, 0.54639654, 0.53045005, 0.75843922, 0.73923675, 0.50146652,
                                                 0.64390793, 0.74218760, 0.68342071, 0.51415522, 0.76053779, 0.74072710,
                                                 0.77974985, 0.76986291, 0.78834407, 0.23532629, 0.71474352, 0.72507704,
                                                 0.25554471, 0.81974742, 0.77019238, 0.33362553, 0.77154728, 0.26916508,
                                                 0.74126370, 0.79929172, 0.31777811, 0.76992121, 0.44861211, 0.74544246,
                                                 0.32369494, 0.56013631, 0.74572694, 0.77198184, 0.72998159, 0.76652516,
                                                 0.76608177, 0.57673921, 0.72409371, 0.64303166, 0.48016605, 0.21784368])

mean_lateral_tf_efficientnetv2_s_gru = np.array([0.79148523, 0.77552741, 0.78810993, 0.79178628, 0.45341088, 0.80048046,
                                                 0.78025599, 0.80921646, 0.79813430, 0.79616450, 0.76535094, 0.66335085,
                                                 0.69051396, 0.74774213, 0.80537084, 0.74125925, 0.70933657, 0.79243091,
                                                 0.69996408, 0.28330235, 0.80383403, 0.53671586, 0.47019035, 0.66403651,
                                                 0.42550892, 0.78703403, 0.29726354, 0.78373617, 0.36167592, 0.78896502,
                                                 0.61324794, 0.77582887, 0.62978933, 0.78669586, 0.50013865, 0.45498030,
                                                 0.80029006, 0.41029293, 0.76554463, 0.25720149, 0.79993277, 0.26626686,
                                                 0.79776765, 0.77254215, 0.73058772, 0.79046808, 0.28912361, 0.27056668,
                                                 0.27489916, 0.80444816, 0.62718371, 0.79909732, 0.63745797, 0.28576395,
                                                 0.25017955, 0.66901270, 0.29562554, 0.74899209, 0.48536687, 0.76023319,
                                                 0.78897016, 0.79637760, 0.61855253, 0.80519422, 0.78607744, 0.78807998,
                                                 0.74600589, 0.79585282, 0.71056618, 0.79100709, 0.79671941, 0.77951053,
                                                 0.78375387, 0.75524163, 0.79690934, 0.27534114, 0.80436938, 0.73640943,
                                                 0.41571784, 0.80327344, 0.80951676, 0.27618593, 0.79496484, 0.74690329,
                                                 0.71887659, 0.80415983, 0.39852820, 0.80265001, 0.28327500, 0.80035648,
                                                 0.41303327, 0.76900276, 0.76978149, 0.77555810, 0.78087355, 0.77776458,
                                                 0.77246523, 0.63895552, 0.79109882, 0.75539802, 0.77560364, 0.33189283])

#=========================================================================================================================
mean_frontal_tf_efficientnetv2_m_gru = np.array([0.73272219, 0.56384396, 0.77017801, 0.76442009, 0.73021884, 0.77484624,
                                                 0.71507044, 0.75773921, 0.68855735, 0.76340400, 0.77858742, 0.71584781,
                                                 0.72396177, 0.76908219, 0.76997339, 0.27483363, 0.61356038, 0.75262915,
                                                 0.65811192, 0.40692334, 0.76022935, 0.39830920, 0.32381665, 0.72495899,
                                                 0.32909673, 0.78121961, 0.33356285, 0.75197545, 0.43134691, 0.74931686,
                                                 0.46123331, 0.73927670, 0.49432561, 0.75078075, 0.37365597, 0.40934730,
                                                 0.76141629, 0.22370416, 0.76056392, 0.62497415, 0.74109468, 0.30192766,
                                                 0.72263923, 0.71595684, 0.24828536, 0.74378546, 0.41655129, 0.22120835,
                                                 0.61958914, 0.77913780, 0.70244275, 0.77186849, 0.66625618, 0.44895738,
                                                 0.30728810, 0.68500125, 0.44952522, 0.64290240, 0.70350285, 0.51652800,
                                                 0.62678812, 0.33113963, 0.31112484, 0.75578405, 0.69705945, 0.66138462,
                                                 0.67591337, 0.72544910, 0.71419368, 0.66671481, 0.72633711, 0.71864675,
                                                 0.70524082, 0.72482674, 0.75834692, 0.24171492, 0.72618726, 0.76504006,
                                                 0.27791183, 0.75942372, 0.74678009, 0.47070065, 0.76865269, 0.45179223,
                                                 0.43299412, 0.72136316, 0.32848903, 0.74850161, 0.59183505, 0.77834729,
                                                 0.34605104, 0.72115846, 0.68913994, 0.76165031, 0.64999493, 0.70974028,
                                                 0.75895903, 0.64277985, 0.75520175, 0.76438078, 0.70555741, 0.38951751])

mean_lateral_tf_efficientnetv2_m_gru = np.array([0.77404596, 0.73060955, 0.71010177, 0.79319137, 0.66150118, 0.79696543,
                                                 0.69912304, 0.78250741, 0.81957852, 0.73333766, 0.76178238, 0.59375905,
                                                 0.61192527, 0.74538397, 0.77601268, 0.66091576, 0.70004679, 0.73854954,
                                                 0.73630077, 0.33096467, 0.71113230, 0.60328677, 0.35538412, 0.73534390,
                                                 0.46454975, 0.66711746, 0.31523573, 0.80970610, 0.59491146, 0.56805345,
                                                 0.59189542, 0.65483273, 0.47320026, 0.71754520, 0.48705177, 0.38843379,
                                                 0.77875202, 0.50857293, 0.76869241, 0.23560557, 0.83424680, 0.27729814,
                                                 0.70818311, 0.73382039, 0.68039408, 0.79864885, 0.61674431, 0.24629066,
                                                 0.29245173, 0.76917316, 0.57443792, 0.74002012, 0.60132822, 0.29245903,
                                                 0.22837231, 0.70060066, 0.31324193, 0.61925545, 0.51691099, 0.78243231,
                                                 0.76373316, 0.82604603, 0.71105244, 0.75179191, 0.81286970, 0.79492811,
                                                 0.76108823, 0.72131661, 0.70907027, 0.77172506, 0.78953325, 0.76739874,
                                                 0.73707136, 0.63680177, 0.80717105, 0.26129650, 0.73583790, 0.67943035,
                                                 0.46766675, 0.77573142, 0.82838850, 0.54365612, 0.72362790, 0.71899376,
                                                 0.43845422, 0.78058500, 0.30613098, 0.77218125, 0.35256136, 0.77633278,
                                                 0.50521811, 0.72470564, 0.72261620, 0.74167032, 0.71655927, 0.75568058,
                                                 0.73829107, 0.60947055, 0.76532384, 0.72432845, 0.71859680, 0.67563947])

#=========================================================================================================================
mean_frontal_efficientnetv2_rw_s_gru = np.array([0.76628615, 0.61777928, 0.80973685, 0.76615316, 0.42745579, 0.76562798,
                                                 0.48320024, 0.77316279, 0.67623875, 0.69619786, 0.79683748, 0.76018173,
                                                 0.77501913, 0.73865757, 0.74772383, 0.37043589, 0.40004815, 0.81161766,
                                                 0.69611955, 0.66119353, 0.78187071, 0.71490841, 0.38761007, 0.73556241,
                                                 0.52374392, 0.76470478, 0.21571149, 0.79351677, 0.22151769, 0.76116328,
                                                 0.49302976, 0.77951975, 0.62473463, 0.76581638, 0.29390282, 0.38850966,
                                                 0.76721299, 0.19432571, 0.79372967, 0.58315034, 0.76131449, 0.53134727,
                                                 0.64304823, 0.59489483, 0.35737790, 0.76857979, 0.64216297, 0.36449963,
                                                 0.77123419, 0.79543191, 0.73708235, 0.78992472, 0.42034151, 0.26144055,
                                                 0.26990820, 0.80152080, 0.51058818, 0.74655175, 0.77552178, 0.77808559,
                                                 0.46755314, 0.58749790, 0.59060262, 0.76939430, 0.77145562, 0.73941576,
                                                 0.73317842, 0.78762408, 0.78371913, 0.62657176, 0.79018309, 0.76834013,
                                                 0.76231831, 0.80497192, 0.75622227, 0.16624041, 0.67235627, 0.74851286,
                                                 0.45602995, 0.78910733, 0.80202435, 0.68777757, 0.81465890, 0.48947557,
                                                 0.63381964, 0.62097432, 0.29713472, 0.75894917, 0.54447972, 0.79507087,
                                                 0.21517408, 0.53464487, 0.61190953, 0.64676384, 0.63362506, 0.78531591,
                                                 0.75000460, 0.52655303, 0.78025197, 0.75116596, 0.71994863, 0.34558036])

mean_lateral_efficientnetv2_rw_s_gru = np.array([0.79788573, 0.81502191, 0.82087891, 0.81178319, 0.36229310, 0.80158154,
                                                 0.81837219, 0.80770870, 0.81807932, 0.81135880, 0.80953975, 0.81674457,
                                                 0.81389459, 0.80413592, 0.81473159, 0.68454033, 0.80476717, 0.81273208,
                                                 0.67951698, 0.57387284, 0.76553303, 0.49160163, 0.58330637, 0.81982884,
                                                 0.41545119, 0.80224506, 0.23019618, 0.80510713, 0.18943660, 0.80174325,
                                                 0.24220522, 0.79098632, 0.42464245, 0.80911617, 0.47298466, 0.38379582,
                                                 0.82584078, 0.28550269, 0.82065289, 0.21645318, 0.79503384, 0.22557398,
                                                 0.81328058, 0.79541923, 0.62467504, 0.79569253, 0.70896689, 0.18114609,
                                                 0.39598117, 0.81097690, 0.76082411, 0.80155886, 0.65770391, 0.22182922,
                                                 0.22715714, 0.80697526, 0.37281300, 0.56668005, 0.67526202, 0.80681977,
                                                 0.81530753, 0.81811503, 0.52127567, 0.80679896, 0.82760296, 0.80139078,
                                                 0.80771793, 0.80134697, 0.80826128, 0.79952404, 0.79504409, 0.80588577,
                                                 0.73969774, 0.76489426, 0.81670848, 0.18881449, 0.79726512, 0.77525270,
                                                 0.36315244, 0.81526537, 0.81874326, 0.46912691, 0.80528309, 0.64942863,
                                                 0.71472105, 0.81324823, 0.31882103, 0.79762496, 0.44754858, 0.80947241,
                                                 0.55880569, 0.65118604, 0.74462379, 0.79637276, 0.76259234, 0.81018434,
                                                 0.81920730, 0.71799901, 0.80596263, 0.78488829, 0.80616542, 0.46949360])



#=========================================================================================================================
mean_frontal_regnet_y_16gf_gru = np.array([0.74767193, 0.71347777, 0.79230950, 0.78752263, 0.67504256, 0.75880722,
                                             0.44570940, 0.75075439, 0.55306321, 0.71499430, 0.79818884, 0.66381161,
                                             0.71583515, 0.72026109, 0.79722438, 0.65874352, 0.69640337, 0.79408252,
                                             0.48619882, 0.54510757, 0.77524511, 0.37646994, 0.43110046, 0.77767495,
                                             0.30139992, 0.73020908, 0.21653271, 0.78701622, 0.23308197, 0.75875292,
                                             0.27824160, 0.76220516, 0.45931106, 0.79753714, 0.32224498, 0.51224510,
                                             0.78736819, 0.20994087, 0.80528538, 0.45606745, 0.76017929, 0.28378917,
                                             0.77699376, 0.60773880, 0.22313249, 0.76845913, 0.60022618, 0.27621251,
                                             0.71721611, 0.78851652, 0.66641818, 0.77883877, 0.29367729, 0.30499628,
                                             0.28915720, 0.78446016, 0.38544561, 0.67988588, 0.73035067, 0.72475762,
                                             0.55425910, 0.53616682, 0.66089557, 0.78689973, 0.73179733, 0.65342144,
                                             0.48135481, 0.77607135, 0.52211299, 0.53207358, 0.78742462, 0.78176246,
                                             0.78331459, 0.77448890, 0.62632155, 0.21235669, 0.57628241, 0.71546896,
                                             0.40762454, 0.79373925, 0.79539810, 0.60006033, 0.80535542, 0.40381297,
                                             0.43314163, 0.69798638, 0.21113268, 0.78070322, 0.59293070, 0.79486576,
                                             0.31691824, 0.46211746, 0.69255399, 0.71510508, 0.66445884, 0.76780244,
                                             0.63222008, 0.36482071, 0.75639197, 0.67729204, 0.50914205, 0.27636157])

mean_lateral_regnet_y_16gf_gru = np.array([0.78204603, 0.78361884, 0.80278453, 0.75642351, 0.63909201, 0.78041579,
                                             0.64619477, 0.76037381, 0.76683817, 0.73087403, 0.78898277, 0.73821871,
                                             0.75806066, 0.78850822, 0.68742437, 0.57557074, 0.57263318, 0.79456706,
                                             0.72541530, 0.55870609, 0.72595495, 0.56324150, 0.61633507, 0.74376656,
                                             0.60418265, 0.77046235, 0.32882402, 0.77701668, 0.26324206, 0.61353249,
                                             0.46471995, 0.68545884, 0.67130778, 0.77505654, 0.32349009, 0.43728625,
                                             0.76046711, 0.40862902, 0.79737040, 0.21606222, 0.80986092, 0.42818199,
                                             0.65812356, 0.69717236, 0.53649517, 0.79391457, 0.70277690, 0.35158229,
                                             0.38907853, 0.77042962, 0.41256720, 0.77442840, 0.63414277, 0.39259921,
                                             0.32005604, 0.73194633, 0.49348569, 0.72677494, 0.64309404, 0.63307686,
                                             0.76595824, 0.77758589, 0.53880412, 0.76593984, 0.77665024, 0.75352937,
                                             0.77886015, 0.79134526, 0.77833956, 0.78075222, 0.78005706, 0.75636941,
                                             0.75419134, 0.71979836, 0.78730612, 0.24244822, 0.77706808, 0.40020671,
                                             0.31696598, 0.77908601, 0.78990216, 0.47227644, 0.78795462, 0.76515338,
                                             0.58582906, 0.76726211, 0.42206459, 0.78309669, 0.55558787, 0.79654242,
                                             0.71823207, 0.65088999, 0.77504094, 0.74265949, 0.70973607, 0.79436702,
                                             0.71458983, 0.70109200, 0.78794566, 0.71863441, 0.72342087, 0.49781387])

#=========================================================================================================================
#=========================================================================================================================

compoundModelEvaluation = ModelEvaluation(compound=True)
modelEvaluationTest = ModelEvaluation(compound=False)

compoundModelEvaluation.reset()
modelEvaluationTest.reset()

frontals = np.ndarray((11,DATASET_LENGTH))
frontals[0][:] = mean_frontal_resnet18_gru
frontals[1][:] = mean_frontal_efficientnet_b0_gru
frontals[2][:] = mean_frontal_efficientnet_b0_lstm
frontals[3][:] = mean_frontal_efficientnet_b1_gru
frontals[4][:] = mean_frontal_efficientnet_b1_lstm
frontals[5][:] = mean_frontal_efficientnet_b2_gru
frontals[6][:] = mean_frontal_efficientnet_b3_gru
frontals[7][:] = mean_frontal_tf_efficientnetv2_s_gru
frontals[8][:] = mean_frontal_tf_efficientnetv2_m_gru
frontals[9][:] = mean_frontal_efficientnetv2_rw_s_gru
frontals[10][:] = mean_frontal_regnet_y_16gf_gru

laterals = np.ndarray((11,DATASET_LENGTH))
laterals[0][:] = mean_lateral_resnet18_gru
laterals[1][:] = mean_lateral_efficientnet_b0_gru
laterals[2][:] = mean_lateral_efficientnet_b0_lstm
laterals[3][:] = mean_lateral_efficientnet_b1_gru
laterals[4][:] = mean_lateral_efficientnet_b1_lstm
laterals[5][:] = mean_lateral_efficientnet_b2_gru
laterals[6][:] = mean_lateral_efficientnet_b3_gru
laterals[7][:] = mean_lateral_tf_efficientnetv2_s_gru
laterals[8][:] = mean_lateral_tf_efficientnetv2_m_gru
laterals[9][:] = mean_lateral_efficientnetv2_rw_s_gru
laterals[10][:] = mean_lateral_regnet_y_16gf_gru

#print(frontals)
#print(laterals)
'''
y_true = gt
y_true = (y_true ==  0.786).astype(int)
y_probas = mean_lateral_resnet18_gru
y_probas = y_probas[:, np.newaxis]
skplt.metrics.plot_roc(y_true, y_probas)
plt.show()
'''

plt.rcParams.update({'font.size': 14})

y_true = gt
y_true = (y_true ==  0.786).astype(int)

'''
# Single classification performance:
y_probas_0 = (frontals[0] + laterals[0]) / 2
y_probas_1 = (frontals[1] + laterals[1]) / 2
y_probas_2 = (frontals[2] + laterals[2]) / 2
y_probas_3 = (frontals[3] + laterals[3]) / 2
y_probas_4 = (frontals[4] + laterals[4]) / 2
y_probas_5 = (frontals[5] + laterals[5]) / 2
y_probas_6 = (frontals[6] + laterals[6]) / 2
y_probas_7 = (frontals[7] + laterals[7]) / 2
y_probas_8 = (frontals[8] + laterals[8]) / 2
y_probas_9 = (frontals[9] + laterals[9]) / 2
y_probas_10 = (frontals[10] + laterals[10]) / 2

auc_0 = metrics.roc_auc_score(y_true, y_probas_0)
auc_1 = metrics.roc_auc_score(y_true, y_probas_1)
auc_2 = metrics.roc_auc_score(y_true, y_probas_2)
auc_3 = metrics.roc_auc_score(y_true, y_probas_3)
auc_4 = metrics.roc_auc_score(y_true, y_probas_4)
auc_5 = metrics.roc_auc_score(y_true, y_probas_5)
auc_6 = metrics.roc_auc_score(y_true, y_probas_6)
auc_7 = metrics.roc_auc_score(y_true, y_probas_7)
auc_8 = metrics.roc_auc_score(y_true, y_probas_8)
auc_9 = metrics.roc_auc_score(y_true, y_probas_9)
auc_10 = metrics.roc_auc_score(y_true, y_probas_10)

print("resnet18_gru = {0:0.2f}".format(auc_0))
print("efficientnet_b0_gru = {0:0.2f}".format(auc_1))
print("efficientnet_b0_lstm = {0:0.2f}".format(auc_2))
print("efficientnet_b1_gru = {0:0.2f}".format(auc_3))
print("efficientnet_b1_lstm = {0:0.2f}".format(auc_4))
print("efficientnet_b2_gru = {0:0.2f}".format(auc_5))
print("efficientnet_b3_gru = {0:0.2f}".format(auc_6))
print("tf_efficientnetv2_s_gru = {0:0.2f}".format(auc_7))
print("tf_efficientnetv2_m_gru = {0:0.2f}".format(auc_8))
print("efficientnetv2_rw_s_gru = {0:0.2f}".format(auc_9))
print("regnet_y_16gf_gru = {0:0.2f}".format(auc_10))
'''

'''
y_probas_1 = (frontals[2] + laterals[2]) / 2
y_probas_2 = (frontals[5] + laterals[5]) / 2
y_probas_3 = (frontals[7] + laterals[7]) / 2

fpr_1, tpr_1, _1 = metrics.roc_curve(y_true,  y_probas_1)
fpr_2, tpr_2, _2 = metrics.roc_curve(y_true,  y_probas_2)
fpr_3, tpr_3, _3 = metrics.roc_curve(y_true,  y_probas_3)


auc_1 = metrics.roc_auc_score(y_true, y_probas_1)
auc_2 = metrics.roc_auc_score(y_true, y_probas_2)
auc_3 = metrics.roc_auc_score(y_true, y_probas_3)


plt.plot(fpr_3,tpr_3,label="TF_EFFICIENTNETV2_S + GRU,\n PA + LAT, AUC={0:0.2f}".format(auc_3), lw=2, linestyle="-.")
plt.plot(fpr_2,tpr_2,label="EFFICIENTNET-B2 + GRU,\n PA + LAT, AUC={0:0.2f}".format(auc_2), lw=2, linestyle="--")
plt.plot(fpr_1,tpr_1,label="EFFICIENTNET-B0 + LSTM,\n PA + LAT, AUC={0:0.2f}".format(auc_1), lw=3, linestyle="-")
plt.plot([0, 1], [0, 1], color="navy", lw=2, linestyle="--")
plt.xlim([-0.05, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel("FALSE POSITIVE RATE")
plt.ylabel("TRUE POSITIVE RATE")
#plt.title("ROC of 3 network architectures\n ensembled performance PA + LAT")
plt.legend(framealpha=1.0, loc=0)
plt.show()
'''


y_probas_1 = (frontals[0] + frontals[7] + laterals[1] + laterals[2]) / 4
y_probas_2 = frontals[0]
y_probas_3 = frontals[7]
y_probas_4 = laterals[1]
y_probas_5 = laterals[2]
fpr_1, tpr_1, _1 = metrics.roc_curve(y_true,  y_probas_1)
fpr_2, tpr_2, _2 = metrics.roc_curve(y_true,  y_probas_2)
fpr_3, tpr_3, _3 = metrics.roc_curve(y_true,  y_probas_3)
fpr_4, tpr_4, _4 = metrics.roc_curve(y_true,  y_probas_4)
fpr_5, tpr_5, _5 = metrics.roc_curve(y_true,  y_probas_5)

auc_1 = metrics.roc_auc_score(y_true, y_probas_1)
auc_2 = metrics.roc_auc_score(y_true, y_probas_2)
auc_3 = metrics.roc_auc_score(y_true, y_probas_3)
auc_4 = metrics.roc_auc_score(y_true, y_probas_4)
auc_5 = metrics.roc_auc_score(y_true, y_probas_5)


plt.plot(fpr_5,tpr_5,label="EFFICIENTNET-B0 + LSTM,\n LAT, AUC={0:0.2f}".format(auc_5), lw=3, linestyle=":")
plt.plot(fpr_4,tpr_4,label="EFFICIENTNET-B0 + GRU,\n LAT, AUC={0:0.2f}".format(auc_4), lw=2, linestyle="-")
plt.plot(fpr_3,tpr_3,label="TF_EFFICIENTNETV2_S + GRU,\n PA, AUC={0:0.2f}".format(auc_3), lw=2, linestyle="-.")
plt.plot(fpr_2,tpr_2,label="RESNET18 + GRU,\n PA, AUC={0:0.2f}".format(auc_2), lw=2, linestyle="--")
plt.plot(fpr_1,tpr_1,label="THESE 4 MODELS ENSEMBLED,\n PA + LAT, AUC={0:0.2f}".format(auc_1), lw=3, linestyle="-")
plt.plot([0, 1], [0, 1], color="navy", lw=2, linestyle="--")
plt.xlim([-0.05, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel("FALSE POSITIVE RATE")
plt.ylabel("TRUE POSITIVE RATE")
#plt.title("ROC of 4 different network architectures\n single performance PA | LAT and ensembled performance PA + LAT")
plt.legend(framealpha=1.0, loc=0)
plt.show()

y_probas_1 = (y_probas_1 >  0.5).astype(int)

tn, fp, fn, tp = metrics.confusion_matrix(y_true, y_probas_1).ravel()
print(tn, fp, fn, tp)


#print("Weights: frontal: 1.2 | lateral: 0.8")

'''
# Ensemble alle Modelle:
compound_probabilities = (np.sum(frontals, axis=0) + np.sum(laterals, axis=0)) / 20
for index in range(DATASET_LENGTH):
    compound_estimate = THROMBUS_NO if compound_probabilities[index] <= 0.5 else THROMBUS_YES
    
    # Auswertung für beide Ansichten gemeinsam:
    if compound_estimate == THROMBUS_NO:
        if gt[index] == THROMBUS_NO:
            compoundModelEvaluation.increaseTNfrontal()
        else:
            compoundModelEvaluation.increaseFNfrontal()
    else: # means: compound_estimate = THROMBUS_YES
        if gt[index] == THROMBUS_NO:
            compoundModelEvaluation.increaseFPfrontal()
        else:
            compoundModelEvaluation.increaseTPfrontal()

compoundModelEvaluation.printAllStats()
'''
'''
# Ensemble 3 Modelle:
for index_out in range(11):
    for index_middle in range(index_out + 1, 11):
        for index_in in range(index_middle + 1, 11):
            
            print("Index_out = {} ; Index_middle = {} ; Index_in = {}".format(index_out, index_middle, index_in))   
            compoundModelEvaluation.reset()
            
            compound_probabilities = (frontals[index_out] + laterals[index_out] +
                                      frontals[index_middle] + laterals[index_middle] + 
                                      frontals[index_in] + laterals[index_in]) / 6
            for index in range(DATASET_LENGTH):
                compound_estimate = THROMBUS_NO if compound_probabilities[index] <= 0.5 else THROMBUS_YES
                
                # Auswertung für beide Ansichten gemeinsam:
                if compound_estimate == THROMBUS_NO:
                    if gt[index] == THROMBUS_NO:
                        compoundModelEvaluation.increaseTNfrontal()
                    else:
                        compoundModelEvaluation.increaseFNfrontal()
                else: # means: compound_estimate = THROMBUS_YES
                    if gt[index] == THROMBUS_NO:
                        compoundModelEvaluation.increaseFPfrontal()
                    else:
                        compoundModelEvaluation.increaseTPfrontal()
            
            compoundModelEvaluation.printAllStats()
'''
'''
 # Ensemble 2 Modelle:
for index_out in range(11):
    for index_in in range(index_out + 1, 11):
        print("Index_out = {} ; Index_in = {}".format(index_out, index_in))   
        compoundModelEvaluation.reset()
        modelEvaluationTest.reset()
        
        mean_probabilities_frontal = (frontals[index_out] + frontals[index_in]) / 2
        mean_probabilities_lateral = (laterals[index_out] + laterals[index_in]) / 2
        compound_probabilities = (frontals[index_out] + laterals[index_out] + frontals[index_in] + laterals[index_in]) / 4
        for index in range(DATASET_LENGTH):
            compound_estimate = THROMBUS_NO if compound_probabilities[index] <= 0.5 else THROMBUS_YES
            estimate_frontal = THROMBUS_NO if mean_probabilities_frontal[index] <= 0.5 else THROMBUS_YES
            estimate_lateral = THROMBUS_NO if mean_probabilities_lateral[index] <= 0.5 else THROMBUS_YES
            
            
            # Auswertung separat je Ansicht:
            if estimate_frontal == THROMBUS_NO:
                if gt[index] == THROMBUS_NO:
                    modelEvaluationTest.increaseTNfrontal()
                else:
                    modelEvaluationTest.increaseFNfrontal()
            else: # means: estimate_frontal = 1
                if gt[index] == THROMBUS_NO:
                    modelEvaluationTest.increaseFPfrontal()
                else:
                    modelEvaluationTest.increaseTPfrontal()
            
            if estimate_lateral == THROMBUS_NO:
                if gt[index] == THROMBUS_NO:
                    modelEvaluationTest.increaseTNlateral()
                else:
                    modelEvaluationTest.increaseFNlateral()
            else: # means: estimate_lateral = 1
                if gt[index] == THROMBUS_NO:
                    modelEvaluationTest.increaseFPlateral()
                else:
                    modelEvaluationTest.increaseTPlateral()
            
            
            
            # Auswertung für beide Ansichten gemeinsam:
            if compound_estimate == THROMBUS_NO:
                if gt[index] == THROMBUS_NO:
                    compoundModelEvaluation.increaseTNfrontal()
                else:
                    compoundModelEvaluation.increaseFNfrontal()
            else: # means: compound_estimate = THROMBUS_YES
                if gt[index] == THROMBUS_NO:
                    compoundModelEvaluation.increaseFPfrontal()
                else:
                    compoundModelEvaluation.increaseTPfrontal()
        
        modelEvaluationTest.printAllStats()
        compoundModelEvaluation.printAllStats()

'''
'''
 # Ensemble ausgewählte Modelle:

print("Frontal_1 = 5 ; Frontal_2 = 10 ; Lateral_1 = 3 ;  Lateral_2 = 4")   
compoundModelEvaluation.reset()


compound_probabilities = (frontals[5] + frontals[10] + laterals[3] + laterals[4]) / 4
for index in range(DATASET_LENGTH):
    compound_estimate = THROMBUS_NO if compound_probabilities[index] <= 0.5 else THROMBUS_YES    
       
 
    # Auswertung für beide Ansichten gemeinsam:
    if compound_estimate == THROMBUS_NO:
        if gt[index] == THROMBUS_NO:
            compoundModelEvaluation.increaseTNfrontal()
        else:
            compoundModelEvaluation.increaseFNfrontal()
    else: # means: compound_estimate = THROMBUS_YES
        if gt[index] == THROMBUS_NO:
            compoundModelEvaluation.increaseFPfrontal()
        else:
            compoundModelEvaluation.increaseTPfrontal()

compoundModelEvaluation.printAllStats()
'''

 # Ensemble 2 Modelle Frontal mit 2 Modellen lateral:
'''
accuracies = list()
mcc = list()
for i_1 in range(11):
    for i_2 in range(11):
        for i_3 in range(11):
            for i_4 in range(11):
                
                #print("Frontal_1 = {} ; Frontal_2 = {} ; Lateral_1 = {} ;  Lateral_2 = {}".format(i_1, i_2, i_3, i_4))   
                compoundModelEvaluation.reset()
                
                
                compound_probabilities = (frontals[i_1] + frontals[i_2] + laterals[i_3] + laterals[i_4]) / 4
                for index in range(DATASET_LENGTH):
                    compound_estimate = THROMBUS_NO if compound_probabilities[index] <= 0.5 else THROMBUS_YES    
                       
                 
                    # Auswertung für beide Ansichten gemeinsam:
                    if compound_estimate == THROMBUS_NO:
                        if gt[index] == THROMBUS_NO:
                            compoundModelEvaluation.increaseTNfrontal()
                        else:
                            compoundModelEvaluation.increaseFNfrontal()
                    else: # means: compound_estimate = THROMBUS_YES
                        if gt[index] == THROMBUS_NO:
                            compoundModelEvaluation.increaseFPfrontal()
                        else:
                            compoundModelEvaluation.increaseTPfrontal()
                
                #compoundModelEvaluation.printAllStats()
                if compoundModelEvaluation.getAccuracyFrontal() == 0.9019607843137255:
                    print("Frontal_1 = {} ; Frontal_2 = {} ; Lateral_1 = {} ;  Lateral_2 = {}".format(i_1, i_2, i_3, i_4))
                if compoundModelEvaluation.getMccFrontal() == 0.7692180630818731:
                    print("Frontal_1 = {} ; Frontal_2 = {} ; Lateral_1 = {} ;  Lateral_2 = {}".format(i_1, i_2, i_3, i_4))
                    compoundModelEvaluation.printAllStats()
                accuracies.append(compoundModelEvaluation.getAccuracyFrontal())
                mcc.append(compoundModelEvaluation.getMccFrontal())
                
                
print(max(accuracies))
print(max(mcc))
                
'''              